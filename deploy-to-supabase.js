// üöÄ SCRIPT DE DEPLOY AUTOM√ÅTICO A SUPABASE STORAGE
// Guarda este archivo como: deploy-to-supabase.js

const fs = require('fs');
const path = require('path');

// ‚ö†Ô∏è IMPORTANTE: Necesitas instalar la librer√≠a de Supabase
// npm install @supabase/supabase-js

const { createClient } = require('@supabase/supabase-js');

// üîß CONFIGURACI√ìN
const SUPABASE_URL = 'https://xelobsbzytdxrrxgmlta.supabase.co';
const SUPABASE_SERVICE_KEY = 'TU_SERVICE_ROLE_KEY_AQU√ç'; // ¬°Obt√©n esta clave del dashboard!

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// üìÅ ARCHIVOS A SUBIR (espec√≠ficos de tu proyecto)
const PROJECT_FILES = {
  // P√°gina principal
  'index.html': 'index.html',
  
  // Admin Panel (renombrar para URL m√°s limpia)
  'admin-panel-estructura-mejorada.html': 'admin.html',
  'html/admin-panel.html': 'admin-panel.html',
  
  // P√°ginas principales
  'html/para_ellas.html': 'para-ellas.html',
  'html/para_ellos.html': 'para-ellos.html',
  'html/contacto.html': 'contacto.html',
  
  // JavaScript cr√≠tico
  'js/admin-panel-mejorado.js': 'js/admin-panel-mejorado.js',
  'js/supabase-config-optimized.js': 'js/supabase-config-optimized.js',
  'js/qr-service-fixed.js': 'js/qr-service-fixed.js',
  'js/app.js': 'js/app.js',
  'js/cart.js': 'js/cart.js',
  
  // CSS
  'css/style.css': 'css/style.css',
  'css/admin-panel.css': 'css/admin-panel.css',
  'css/navbar.css': 'css/navbar.css',
  'css/cart.css': 'css/cart.css',
};

// üé® MIME TYPES
function getContentType(filename) {
  const ext = path.extname(filename).toLowerCase();
  const mimeTypes = {
    '.html': 'text/html; charset=utf-8',
    '.css': 'text/css; charset=utf-8',
    '.js': 'application/javascript; charset=utf-8',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon',
    '.mp4': 'video/mp4',
    '.pdf': 'application/pdf'
  };
  return mimeTypes[ext] || 'application/octet-stream';
}

// üì§ FUNCI√ìN DE UPLOAD
async function uploadFile(localPath, remotePath) {
  try {
    if (!fs.existsSync(localPath)) {
      console.log(`‚ö†Ô∏è  Archivo no encontrado: ${localPath}`);
      return false;
    }

    const fileContent = fs.readFileSync(localPath);
    const contentType = getContentType(localPath);

    console.log(`üì§ Subiendo: ${localPath} ‚Üí ${remotePath}`);

    const { data, error } = await supabase.storage
      .from('website')
      .upload(remotePath, fileContent, {
        contentType: contentType,
        upsert: true // Sobrescribir si existe
      });

    if (error) {
      console.error(`‚ùå Error subiendo ${remotePath}:`, error.message);
      return false;
    }

    console.log(`‚úÖ Subido exitosamente: ${remotePath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error procesando ${localPath}:`, error.message);
    return false;
  }
}

// üèóÔ∏è FUNCI√ìN PARA CREAR BUCKET
async function createBucket() {
  console.log('üèóÔ∏è  Creando bucket "website"...');
  
  const { data, error } = await supabase.storage.createBucket('website', {
    public: true
  });

  if (error && !error.message.includes('already exists')) {
    console.error('‚ùå Error creando bucket:', error.message);
    return false;
  }

  console.log('‚úÖ Bucket "website" listo');
  return true;
}

// üîê CONFIGURAR POL√çTICAS DE ACCESO
async function setupPolicies() {
  console.log('üîê Configurando pol√≠ticas de acceso...');
  
  try {
    // Esta query debe ejecutarse manualmente en el SQL Editor de Supabase
    const policySQL = `
-- Pol√≠tica para acceso p√∫blico de lectura
CREATE POLICY "Public read access for website" ON storage.objects
FOR SELECT USING (bucket_id = 'website');

-- Pol√≠tica para subida desde admin
CREATE POLICY "Admin upload access for website" ON storage.objects
FOR INSERT WITH CHECK (bucket_id = 'website' AND auth.role() = 'service_role');

-- Pol√≠tica para actualizaci√≥n desde admin
CREATE POLICY "Admin update access for website" ON storage.objects
FOR UPDATE USING (bucket_id = 'website' AND auth.role() = 'service_role');
    `;
    
    console.log('üìã Ejecuta este SQL en tu dashboard de Supabase:');
    console.log(policySQL);
    
  } catch (error) {
    console.error('‚ùå Error configurando pol√≠ticas:', error.message);
  }
}

// üöÄ FUNCI√ìN PRINCIPAL DE DEPLOY
async function deployToSupabase() {
  console.log('üöÄ INICIANDO DEPLOY A SUPABASE STORAGE...\n');

  // Verificar configuraci√≥n
  if (SUPABASE_SERVICE_KEY === 'TU_SERVICE_ROLE_KEY_AQU√ç') {
    console.error('‚ùå DEBES CONFIGURAR TU SERVICE_ROLE_KEY');
    console.log('üìã Obt√©n tu Service Role Key desde:');
    console.log('   Dashboard ‚Üí Settings ‚Üí API ‚Üí service_role key');
    process.exit(1);
  }

  // Crear bucket
  await createBucket();
  
  // Configurar pol√≠ticas
  await setupPolicies();

  let uploadedCount = 0;
  let totalFiles = Object.keys(PROJECT_FILES).length;

  // Subir archivos espec√≠ficos
  console.log(`\nüì§ Subiendo ${totalFiles} archivos principales...\n`);
  
  for (const [localPath, remotePath] of Object.entries(PROJECT_FILES)) {
    const success = await uploadFile(localPath, remotePath);
    if (success) uploadedCount++;
  }

  // Subir carpeta de im√°genes completa
  console.log('\nüñºÔ∏è  Subiendo carpeta IMAGENES...');
  await uploadFolder('IMAGENES', 'IMAGENES');

  console.log('\nüé¨ Subiendo carpeta VIDEOS...');
  await uploadFolder('VIDEOS', 'VIDEOS');

  // Resultados finales
  console.log('\n' + '='.repeat(50));
  console.log('üéâ DEPLOY COMPLETADO');
  console.log('='.repeat(50));
  console.log(`‚úÖ Archivos subidos: ${uploadedCount}/${totalFiles}`);
  console.log('\nüåê URLs de tu sitio:');
  console.log(`   P√°gina principal: ${SUPABASE_URL}/storage/v1/object/public/website/index.html`);
  console.log(`   Admin Panel:      ${SUPABASE_URL}/storage/v1/object/public/website/admin.html`);
  console.log(`   Para Ellas:       ${SUPABASE_URL}/storage/v1/object/public/website/para-ellas.html`);
  console.log(`   Para Ellos:       ${SUPABASE_URL}/storage/v1/object/public/website/para-ellos.html`);
  console.log('\nüìã SIGUIENTE PASO: Configurar CORS en Supabase Dashboard');
  console.log(`   Settings ‚Üí API ‚Üí CORS Origins ‚Üí Agregar: ${SUPABASE_URL}`);
}

// üìÅ FUNCI√ìN AUXILIAR PARA SUBIR CARPETAS COMPLETAS
async function uploadFolder(folderPath, remoteFolder) {
  if (!fs.existsSync(folderPath)) {
    console.log(`‚ö†Ô∏è  Carpeta no encontrada: ${folderPath}`);
    return;
  }

  const files = fs.readdirSync(folderPath);
  
  for (const file of files) {
    const fullPath = path.join(folderPath, file);
    const remotePath = `${remoteFolder}/${file}`;
    
    if (fs.statSync(fullPath).isFile()) {
      await uploadFile(fullPath, remotePath);
    }
  }
}

// üöÄ EJECUTAR DEPLOY
if (require.main === module) {
  deployToSupabase().catch(console.error);
}

module.exports = { deployToSupabase };
